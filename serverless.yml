service: statemachine

provider:
  name: aws
  runtime: nodejs8.10
  region: us-east-1
  profile: default
  memorySize: 256 # optional, in MB, default is 1024
  stage: prod

plugins:
  - serverless-offline
  - serverless-dynamodb-local

functions:
  stateMachine:
    handler: index.handler
    events:
      - http:
          path: currentState
          method: get
      - http:
          path: handleState
          method: post
  currentState:
    handler: index.currentState

custom:
  dynamodb:
    stages:
      - test
      - dev
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-games
  serverless-offline:   ## add this two lines
    port: 4000        ## bellow "custom:" line

Resources:
  gamesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:custom.tableName}
      AttributeDefinitions:
        - AttributeName: idGame
          AttributeType: S
      KeySchema:
        - AttributeName: idGame
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 3
        WriteCapacityUnits: 3

iamRoleStatements:
  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${self:custom.tableName}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ NotesTable, Arn ]