org: ramansme
app: statemachine-app
service: statemachine

provider:
  name: aws
  runtime: nodejs8.10
  region: us-east-1
  profile: default
  memorySize: 256 # optional, in MB, default is 1024
  stage: dev

plugins:
  - serverless-dynamodb-local
  - serverless-offline

functions:
  createMachineInstance:
    handler: src/index.handler
    events:
      - http:
          path: /instance
          method: post    
  machineState:
    handler: src/index.handler
    events:
      - http:
          path: /instance/{instanceId}
          method: get
  processMachineEvent:
    handler: src/index.handler
    events:
      - http:
          path: /instance/{instanceId}
          method: put
  newMachine:
    handler: src/index.handler
    events:
      - http:
          path: /machine
          method: post
  getMachine:
    handler: src/index.handler
    events:
      - http:
          path: /machine/{machineId}
          method: get

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  machineTableName: ${self:custom.stage}-machine
  instanceTableName: ${self:custom.stage}-instance
  serverless-offline:   ## add this two lines
    port: 4000        ## bellow "custom:" line

environment:
  machineTableName: ${self:custom.machineTableName}
  instanceTableName: ${self:custom.instanceTableName}

resources:
  Resources:
    instanceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.instanceTableName}
        AttributeDefinitions:
          - AttributeName: instanceId
            AttributeType: S
        KeySchema:
          - AttributeName: instanceId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    machineTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.machineTableName}
        AttributeDefinitions:
          - AttributeName: machineId
            AttributeType: S
        KeySchema:
          - AttributeName: machineId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

iamRoleStatements:
  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${self:custom.tableName}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ NotesTable, Arn ]